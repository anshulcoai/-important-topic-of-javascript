1. Method Chaining
Description:
Method chaining is a technique in JavaScript where multiple methods are called on the same object in a single line of code. It allows for concise and readable code by eliminating the need for intermediate variables.

Example:
Without chaining, multiple statements are required to achieve the same effect. With chaining, the same operations are performed in a single line.

2. Logical Operators
Description:
Logical operators are used to combine or manipulate boolean values (true or false).

AND (&&): Returns true if all conditions are true.
OR (||): Returns true if at least one condition is true.
NOT (!): Reverses the boolean value.
Example:
Used in conditions to evaluate multiple expressions, such as checking weather conditions or toggling boolean states.

3. Comparison and Equality Operators
Description:
These operators are used to compare values:

=: Assignment operator, assigns a value.
==: Comparison operator, checks if values are equal (type conversion allowed).
===: Strict equality operator, checks if values and types are both equal.
!=: Inequality operator, checks if values are not equal.
!==: Strict inequality operator, checks if values and types are not equal.
Example:
Comparing a constant value (PI) using strict equality and inequality operators.

4. While Loop
Description:
The while loop executes a block of code repeatedly as long as the specified condition is true.
It is ideal for situations where the number of iterations is unknown and depends on a dynamic condition.

Example:

Prompting the user until they provide a valid input.
Simulating a login system that continues until valid credentials are entered.
5. For Loop
Description:
The for loop is used to repeat a block of code a specific number of times.

Includes three parts: initialization, condition, and iteration.
continue: Skips the current iteration and moves to the next one.
Example:

Counting down by decrementing a variable.
Skipping a specific value during iteration (e.g., skipping 13).
6. Functions
Description:
Functions in JavaScript are reusable blocks of code designed to perform a specific task.

Functions can take parameters and return values.
They help reduce code repetition and improve modularity.
Example:

A happyBirthday function that takes a name and age as parameters and prints a birthday message.
An isValidEmail function that checks whether an email string contains the @ character.
